import inquirer from "inquirer";
import {Product} from "./models/Product";
import {ProductService} from "./services/ProductService";
import {Category} from "./enums/Category";


const service = new ProductService();

async function mainMenu(){
    while(true){
        const {action}= await inquirer.prompt([
            {
                type:"list",
                name: "action",
                message: "Ch·ªçn thao t√°c",
                choices:[
                    "Th√™m s·∫£n ph·∫©m",
                    "Hi·ªÉn th·ªã t·∫•t c·∫£",
                    "T√¨m ki·∫øm s·∫£n ph·∫©m",
                    "X√≥a s·∫£n ph·∫©m",
                    "Tho√°t"
                ]
            }
        ]);
        switch(action){
            case "Th√™m s·∫£n ph·∫©m":{
                const newProduct = await inquirer.prompt([
                    {name: "id", type: "number", message: "ID saÃân ph√¢Ãâm"},
                    {name: "name", type: "input", message: "T√™n saÃân ph√¢Ãâm"},
                    {name : "price",type: "number", message: "GiaÃÅ saÃân ph√¢Ãâm"},
                    {
                        name: "category", type: "list", message:"Danh muÃ£c",choices: Object.values(Category)
                    }
                ]);
                service.addProduct(newProduct as Product);
                console.log("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m!");
                break;
            }
            case "Hi·ªÉn th·ªã t·∫•t c·∫£":{
                console.table(service.getAll());
                break;
            }
            case "T√¨m ki·∫øm theo t√™n":{
                const {keyword} = await inquirer.prompt([
                    {name:"keyword", type:"input", message:"Nh·∫≠p t·ª´ kh√≥a:"}
                ]);
                if (keyword.trim()) {
                    const results = service.searchByName(keyword);
                    console.table(results.length ? results : "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.");
                  } else {
                    console.log("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p t·ª´ kho√°.");
                  }
                  break;
                }
            case "C·∫≠p nh·∫≠t s·∫£n ph·∫©m":{
                const { updateId } = await inquirer.prompt([
                    { name: "updateId", type: "number", message: "ID s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t:" }
                  ]);
                
                  const productToUpdate = service.getAll().find(p => p.id === updateId);
                  if (!productToUpdate) {
                    console.log("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.");
                    break;
                  }
                
                  const updateInputs = await inquirer.prompt([
                    { name: "name", type: "input", message: `T√™n m·ªõi (${productToUpdate.name}):` },
                    { name: "price", type: "input", message: `Gi√° m·ªõi (${productToUpdate.price}):` }
                  ]);
                
                  const newData: Partial<Product> = {};
                  if (updateInputs.name.trim()) newData.name = updateInputs.name;
                  const parsedPrice = parseFloat(updateInputs.price);
                  if (!isNaN(parsedPrice)) newData.price = parsedPrice;
                
                  const updated = service.updateProduct(updateId, newData);
                  console.log(updated ? "‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m!" : "‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i.");
                  if (updated) console.table(service.getAll().find(p => p.id === updateId));
                  break;
            }
            case "X√≥a s·∫£n ph·∫©m":{
                const {deleteId}= await inquirer.prompt([
                    {name: "deleteId", type: "number", message:" ID s·∫£n ph·∫©m c·∫ßn x√≥a:"}                   
                ]);
                const deleted = service.removeProduct(deleteId);
                console.log(deleted ? "‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m!" : "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!");
                break;
            }
            case "Tho√°t":{
                console.log("üëã T·∫°m bi·ªát!");
                process.exit(0);
            }
        }
    }
}

mainMenu();